{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ReduceOperator",
            "range": [
              9,
              23
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 23
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ReduceOperator",
            "range": [
              9,
              23
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 23
              }
            }
          },
          "range": [
            9,
            23
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./reduce",
        "raw": "'./reduce'",
        "range": [
          31,
          41
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 31
          },
          "end": {
            "line": 1,
            "column": 41
          }
        }
      },
      "range": [
        0,
        42
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 42
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n * `min` 操作符操作的 Observable 发出数字(或可以使用提供函数进行比较的项)并且当源 Observable 完成时它发出单一项：最小值的项。\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>获取一连串数字中的最小值</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>使用比较函数来获取最小值的项</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - 可选的比较函数，用它来替代默认值来比较两项的值。\n * @return {Observable<R>} 该 Observable 发出最小值的项。\n * @method min\n * @owner Observable\n ",
          "range": [
            43,
            1119
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "min",
          "range": [
            1136,
            1139
          ],
          "loc": {
            "start": {
              "line": 33,
              "column": 16
            },
            "end": {
              "line": 33,
              "column": 19
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "comparer",
            "range": [
              1140,
              1148
            ],
            "loc": {
              "start": {
                "line": 33,
                "column": 20
              },
              "end": {
                "line": 33,
                "column": 28
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "min",
                    "range": [
                      1162,
                      1165
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 10
                      },
                      "end": {
                        "line": 34,
                        "column": 13
                      }
                    }
                  },
                  "init": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparer",
                          "range": [
                            1176,
                            1184
                          ],
                          "loc": {
                            "start": {
                              "line": 34,
                              "column": 24
                            },
                            "end": {
                              "line": 34,
                              "column": 32
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          1169,
                          1184
                        ],
                        "loc": {
                          "start": {
                            "line": 34,
                            "column": 17
                          },
                          "end": {
                            "line": 34,
                            "column": 32
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'",
                        "range": [
                          1189,
                          1199
                        ],
                        "loc": {
                          "start": {
                            "line": 34,
                            "column": 37
                          },
                          "end": {
                            "line": 34,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        1169,
                        1199
                      ],
                      "loc": {
                        "start": {
                          "line": 34,
                          "column": 17
                        },
                        "end": {
                          "line": 34,
                          "column": 47
                        }
                      }
                    },
                    "consequent": {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1212,
                            1213
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 11
                            },
                            "end": {
                              "line": 35,
                              "column": 12
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1215,
                            1216
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 14
                            },
                            "end": {
                              "line": 35,
                              "column": 15
                            }
                          }
                        }
                      ],
                      "body": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "comparer",
                              "range": [
                                1221,
                                1229
                              ],
                              "loc": {
                                "start": {
                                  "line": 35,
                                  "column": 20
                                },
                                "end": {
                                  "line": 35,
                                  "column": 28
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "x",
                                "range": [
                                  1230,
                                  1231
                                ],
                                "loc": {
                                  "start": {
                                    "line": 35,
                                    "column": 29
                                  },
                                  "end": {
                                    "line": 35,
                                    "column": 30
                                  }
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "y",
                                "range": [
                                  1233,
                                  1234
                                ],
                                "loc": {
                                  "start": {
                                    "line": 35,
                                    "column": 32
                                  },
                                  "end": {
                                    "line": 35,
                                    "column": 33
                                  }
                                }
                              }
                            ],
                            "range": [
                              1221,
                              1235
                            ],
                            "loc": {
                              "start": {
                                "line": 35,
                                "column": 20
                              },
                              "end": {
                                "line": 35,
                                "column": 34
                              }
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0",
                            "range": [
                              1238,
                              1239
                            ],
                            "loc": {
                              "start": {
                                "line": 35,
                                "column": 37
                              },
                              "end": {
                                "line": 35,
                                "column": 38
                              }
                            }
                          },
                          "range": [
                            1221,
                            1239
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 20
                            },
                            "end": {
                              "line": 35,
                              "column": 38
                            }
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1242,
                            1243
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 41
                            },
                            "end": {
                              "line": 35,
                              "column": 42
                            }
                          }
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1246,
                            1247
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 45
                            },
                            "end": {
                              "line": 35,
                              "column": 46
                            }
                          }
                        },
                        "range": [
                          1221,
                          1247
                        ],
                        "loc": {
                          "start": {
                            "line": 35,
                            "column": 20
                          },
                          "end": {
                            "line": 35,
                            "column": 46
                          }
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "range": [
                        1211,
                        1247
                      ],
                      "loc": {
                        "start": {
                          "line": 35,
                          "column": 10
                        },
                        "end": {
                          "line": 35,
                          "column": 46
                        }
                      }
                    },
                    "alternate": {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1259,
                            1260
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 11
                            },
                            "end": {
                              "line": 36,
                              "column": 12
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1262,
                            1263
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 14
                            },
                            "end": {
                              "line": 36,
                              "column": 15
                            }
                          }
                        }
                      ],
                      "body": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "x",
                            "range": [
                              1268,
                              1269
                            ],
                            "loc": {
                              "start": {
                                "line": 36,
                                "column": 20
                              },
                              "end": {
                                "line": 36,
                                "column": 21
                              }
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "y",
                            "range": [
                              1272,
                              1273
                            ],
                            "loc": {
                              "start": {
                                "line": 36,
                                "column": 24
                              },
                              "end": {
                                "line": 36,
                                "column": 25
                              }
                            }
                          },
                          "range": [
                            1268,
                            1273
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 20
                            },
                            "end": {
                              "line": 36,
                              "column": 25
                            }
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1276,
                            1277
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 28
                            },
                            "end": {
                              "line": 36,
                              "column": 29
                            }
                          }
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1280,
                            1281
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 32
                            },
                            "end": {
                              "line": 36,
                              "column": 33
                            }
                          }
                        },
                        "range": [
                          1268,
                          1281
                        ],
                        "loc": {
                          "start": {
                            "line": 36,
                            "column": 20
                          },
                          "end": {
                            "line": 36,
                            "column": 33
                          }
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "range": [
                        1258,
                        1281
                      ],
                      "loc": {
                        "start": {
                          "line": 36,
                          "column": 10
                        },
                        "end": {
                          "line": 36,
                          "column": 33
                        }
                      }
                    },
                    "range": [
                      1168,
                      1281
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 16
                      },
                      "end": {
                        "line": 36,
                        "column": 33
                      }
                    }
                  },
                  "range": [
                    1162,
                    1281
                  ],
                  "loc": {
                    "start": {
                      "line": 34,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 33
                    }
                  }
                }
              ],
              "kind": "const",
              "range": [
                1156,
                1282
              ],
              "loc": {
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 34
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      1294,
                      1298
                    ],
                    "loc": {
                      "start": {
                        "line": 37,
                        "column": 11
                      },
                      "end": {
                        "line": 37,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      1299,
                      1303
                    ],
                    "loc": {
                      "start": {
                        "line": 37,
                        "column": 16
                      },
                      "end": {
                        "line": 37,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    1294,
                    1303
                  ],
                  "loc": {
                    "start": {
                      "line": 37,
                      "column": 11
                    },
                    "end": {
                      "line": 37,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ReduceOperator",
                      "range": [
                        1308,
                        1322
                      ],
                      "loc": {
                        "start": {
                          "line": 37,
                          "column": 25
                        },
                        "end": {
                          "line": 37,
                          "column": 39
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "min",
                        "range": [
                          1323,
                          1326
                        ],
                        "loc": {
                          "start": {
                            "line": 37,
                            "column": 40
                          },
                          "end": {
                            "line": 37,
                            "column": 43
                          }
                        }
                      }
                    ],
                    "range": [
                      1304,
                      1327
                    ],
                    "loc": {
                      "start": {
                        "line": 37,
                        "column": 21
                      },
                      "end": {
                        "line": 37,
                        "column": 44
                      }
                    }
                  }
                ],
                "range": [
                  1294,
                  1328
                ],
                "loc": {
                  "start": {
                    "line": 37,
                    "column": 11
                  },
                  "end": {
                    "line": 37,
                    "column": 45
                  }
                }
              },
              "range": [
                1287,
                1329
              ],
              "loc": {
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 46
                }
              }
            }
          ],
          "range": [
            1150,
            1331
          ],
          "loc": {
            "start": {
              "line": 33,
              "column": 30
            },
            "end": {
              "line": 38,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1127,
          1331
        ],
        "loc": {
          "start": {
            "line": 33,
            "column": 7
          },
          "end": {
            "line": 38,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n * `min` 操作符操作的 Observable 发出数字(或可以使用提供函数进行比较的项)并且当源 Observable 完成时它发出单一项：最小值的项。\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>获取一连串数字中的最小值</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>使用比较函数来获取最小值的项</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - 可选的比较函数，用它来替代默认值来比较两项的值。\n * @return {Observable<R>} 该 Observable 发出最小值的项。\n * @method min\n * @owner Observable\n ",
            "range": [
              43,
              1119
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 32,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=min.js.map",
            "range": [
              1332,
              1363
            ],
            "loc": {
              "start": {
                "line": 39,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 31
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1120,
        1331
      ],
      "loc": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n * `min` 操作符操作的 Observable 发出数字(或可以使用提供函数进行比较的项)并且当源 Observable 完成时它发出单一项：最小值的项。\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>获取一连串数字中的最小值</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>使用比较函数来获取最小值的项</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - 可选的比较函数，用它来替代默认值来比较两项的值。\n * @return {Observable<R>} 该 Observable 发出最小值的项。\n * @method min\n * @owner Observable\n ",
          "range": [
            43,
            1119
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=min.js.map",
          "range": [
            1332,
            1363
          ],
          "loc": {
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 31
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1331
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 38,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n * `min` 操作符操作的 Observable 发出数字(或可以使用提供函数进行比较的项)并且当源 Observable 完成时它发出单一项：最小值的项。\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>获取一连串数字中的最小值</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>使用比较函数来获取最小值的项</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - 可选的比较函数，用它来替代默认值来比较两项的值。\n * @return {Observable<R>} 该 Observable 发出最小值的项。\n * @method min\n * @owner Observable\n ",
      "range": [
        43,
        1119
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=min.js.map",
      "range": [
        1332,
        1363
      ],
      "loc": {
        "start": {
          "line": 39,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 31
        }
      }
    }
  ]
}