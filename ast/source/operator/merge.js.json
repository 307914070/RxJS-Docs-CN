{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "range": [
            9,
            19
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Observable",
        "raw": "'../Observable'",
        "range": [
          27,
          42
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 27
          },
          "end": {
            "line": 1,
            "column": 42
          }
        }
      },
      "range": [
        0,
        43
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 43
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              53,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              53,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "range": [
            53,
            68
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          76,
          107
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 32
          },
          "end": {
            "line": 2,
            "column": 63
          }
        }
      },
      "range": [
        44,
        108
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              118,
              134
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              118,
              134
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 25
              }
            }
          },
          "range": [
            118,
            134
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          142,
          154
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 33
          },
          "end": {
            "line": 3,
            "column": 45
          }
        }
      },
      "range": [
        109,
        155
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 46
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              165,
              176
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              165,
              176
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 20
              }
            }
          },
          "range": [
            165,
            176
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          184,
          205
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 28
          },
          "end": {
            "line": 4,
            "column": 49
          }
        }
      },
      "range": [
        156,
        206
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 50
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            207,
            242
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 创建一个输出 Observable ，它可以同时发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过把多个 Observables 的值混合到一个 Observable 中\n * 来将其打平。</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` 订阅每个给定的输入 Observable (给定的源或作为参数的 Observable )，然后只是\n * 将所有输入 Observables 的所有值发送(不进行任何转换)到输出 Observable 。所有的输入\n * Observable 都完成了，输出 Observable 才能完成。任何由输入 Observable 发出的错误都\n * 会立即在输出 Observalbe 上发出。\n *\n * @example <caption>合并两个 Observables: 时间间隔为1秒的 timer 和 clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>合并三个 Observables ，但只能同时运行两个</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // 参数\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other 可以与源 Observable 合并的输入 Observable 。\n * 可以给定多个输入 Observables 作为参数。\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] 可以同时订阅的输入\n * Observables 的最大数量。\n * @param {Scheduler} [scheduler=null] 用来管理输入 Observables 的并发性的\n * 调度器。\n * @return {Observable} 该 Observable 发出的项是每个输入 Observable 的结果。\n * @method merge\n * @owner Observable\n ",
          "range": [
            243,
            1746
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "merge",
          "range": [
            1763,
            1768
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 16
            },
            "end": {
              "line": 48,
              "column": 21
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                1772,
                1783
              ],
              "loc": {
                "start": {
                  "line": 48,
                  "column": 25
                },
                "end": {
                  "line": 48,
                  "column": 36
                }
              }
            },
            "range": [
              1769,
              1783
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 22
              },
              "end": {
                "line": 48,
                "column": 36
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        1798,
                        1802
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 11
                        },
                        "end": {
                          "line": 49,
                          "column": 15
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lift",
                      "range": [
                        1803,
                        1807
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 16
                        },
                        "end": {
                          "line": 49,
                          "column": 20
                        }
                      }
                    },
                    "range": [
                      1798,
                      1807
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 11
                      },
                      "end": {
                        "line": 49,
                        "column": 20
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "call",
                    "range": [
                      1808,
                      1812
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 21
                      },
                      "end": {
                        "line": 49,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    1798,
                    1812
                  ],
                  "loc": {
                    "start": {
                      "line": 49,
                      "column": 11
                    },
                    "end": {
                      "line": 49,
                      "column": 25
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "mergeStatic",
                      "range": [
                        1813,
                        1824
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 26
                        },
                        "end": {
                          "line": 49,
                          "column": 37
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          1825,
                          1829
                        ],
                        "loc": {
                          "start": {
                            "line": 49,
                            "column": 38
                          },
                          "end": {
                            "line": 49,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            1834,
                            1845
                          ],
                          "loc": {
                            "start": {
                              "line": 49,
                              "column": 47
                            },
                            "end": {
                              "line": 49,
                              "column": 58
                            }
                          }
                        },
                        "range": [
                          1831,
                          1845
                        ],
                        "loc": {
                          "start": {
                            "line": 49,
                            "column": 44
                          },
                          "end": {
                            "line": 49,
                            "column": 58
                          }
                        }
                      }
                    ],
                    "range": [
                      1813,
                      1846
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 26
                      },
                      "end": {
                        "line": 49,
                        "column": 59
                      }
                    }
                  }
                ],
                "range": [
                  1798,
                  1847
                ],
                "loc": {
                  "start": {
                    "line": 49,
                    "column": 11
                  },
                  "end": {
                    "line": 49,
                    "column": 60
                  }
                }
              },
              "range": [
                1791,
                1848
              ],
              "loc": {
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 61
                }
              }
            }
          ],
          "range": [
            1785,
            1850
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 38
            },
            "end": {
              "line": 50,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1754,
          1850
        ],
        "loc": {
          "start": {
            "line": 48,
            "column": 7
          },
          "end": {
            "line": 50,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              207,
              242
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 创建一个输出 Observable ，它可以同时发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过把多个 Observables 的值混合到一个 Observable 中\n * 来将其打平。</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` 订阅每个给定的输入 Observable (给定的源或作为参数的 Observable )，然后只是\n * 将所有输入 Observables 的所有值发送(不进行任何转换)到输出 Observable 。所有的输入\n * Observable 都完成了，输出 Observable 才能完成。任何由输入 Observable 发出的错误都\n * 会立即在输出 Observalbe 上发出。\n *\n * @example <caption>合并两个 Observables: 时间间隔为1秒的 timer 和 clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>合并三个 Observables ，但只能同时运行两个</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // 参数\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other 可以与源 Observable 合并的输入 Observable 。\n * 可以给定多个输入 Observables 作为参数。\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] 可以同时订阅的输入\n * Observables 的最大数量。\n * @param {Scheduler} [scheduler=null] 用来管理输入 Observables 的并发性的\n * 调度器。\n * @return {Observable} 该 Observable 发出的项是每个输入 Observable 的结果。\n * @method merge\n * @owner Observable\n ",
            "range": [
              243,
              1746
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 47,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              1851,
              1886
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              1887,
              4616
            ],
            "loc": {
              "start": {
                "line": 52,
                "column": 0
              },
              "end": {
                "line": 111,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1747,
        1850
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            207,
            242
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 创建一个输出 Observable ，它可以同时发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过把多个 Observables 的值混合到一个 Observable 中\n * 来将其打平。</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` 订阅每个给定的输入 Observable (给定的源或作为参数的 Observable )，然后只是\n * 将所有输入 Observables 的所有值发送(不进行任何转换)到输出 Observable 。所有的输入\n * Observable 都完成了，输出 Observable 才能完成。任何由输入 Observable 发出的错误都\n * 会立即在输出 Observalbe 上发出。\n *\n * @example <caption>合并两个 Observables: 时间间隔为1秒的 timer 和 clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>合并三个 Observables ，但只能同时运行两个</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // 参数\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other 可以与源 Observable 合并的输入 Observable 。\n * 可以给定多个输入 Observables 作为参数。\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] 可以同时订阅的输入\n * Observables 的最大数量。\n * @param {Scheduler} [scheduler=null] 用来管理输入 Observables 的并发性的\n * 调度器。\n * @return {Observable} 该 Observable 发出的项是每个输入 Observable 的结果。\n * @method merge\n * @owner Observable\n ",
          "range": [
            243,
            1746
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            1851,
            1886
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            1887,
            4616
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 0
            },
            "end": {
              "line": 111,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "mergeStatic",
          "range": [
            4633,
            4644
          ],
          "loc": {
            "start": {
              "line": 112,
              "column": 16
            },
            "end": {
              "line": 112,
              "column": 27
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                4648,
                4659
              ],
              "loc": {
                "start": {
                  "line": 112,
                  "column": 31
                },
                "end": {
                  "line": 112,
                  "column": 42
                }
              }
            },
            "range": [
              4645,
              4659
            ],
            "loc": {
              "start": {
                "line": 112,
                "column": 28
              },
              "end": {
                "line": 112,
                "column": 42
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "concurrent",
                    "range": [
                      4671,
                      4681
                    ],
                    "loc": {
                      "start": {
                        "line": 113,
                        "column": 8
                      },
                      "end": {
                        "line": 113,
                        "column": 18
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Number",
                      "range": [
                        4684,
                        4690
                      ],
                      "loc": {
                        "start": {
                          "line": 113,
                          "column": 21
                        },
                        "end": {
                          "line": 113,
                          "column": 27
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "POSITIVE_INFINITY",
                      "range": [
                        4691,
                        4708
                      ],
                      "loc": {
                        "start": {
                          "line": 113,
                          "column": 28
                        },
                        "end": {
                          "line": 113,
                          "column": 45
                        }
                      }
                    },
                    "range": [
                      4684,
                      4708
                    ],
                    "loc": {
                      "start": {
                        "line": 113,
                        "column": 21
                      },
                      "end": {
                        "line": 113,
                        "column": 45
                      }
                    }
                  },
                  "range": [
                    4671,
                    4708
                  ],
                  "loc": {
                    "start": {
                      "line": 113,
                      "column": 8
                    },
                    "end": {
                      "line": 113,
                      "column": 45
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4667,
                4709
              ],
              "loc": {
                "start": {
                  "line": 113,
                  "column": 4
                },
                "end": {
                  "line": 113,
                  "column": 46
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4718,
                      4727
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 8
                      },
                      "end": {
                        "line": 114,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4730,
                      4734
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 20
                      },
                      "end": {
                        "line": 114,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    4718,
                    4734
                  ],
                  "loc": {
                    "start": {
                      "line": 114,
                      "column": 8
                    },
                    "end": {
                      "line": 114,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4714,
                4735
              ],
              "loc": {
                "start": {
                  "line": 114,
                  "column": 4
                },
                "end": {
                  "line": 114,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      4744,
                      4748
                    ],
                    "loc": {
                      "start": {
                        "line": 115,
                        "column": 8
                      },
                      "end": {
                        "line": 115,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4751,
                        4762
                      ],
                      "loc": {
                        "start": {
                          "line": 115,
                          "column": 15
                        },
                        "end": {
                          "line": 115,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4763,
                            4774
                          ],
                          "loc": {
                            "start": {
                              "line": 115,
                              "column": 27
                            },
                            "end": {
                              "line": 115,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            4775,
                            4781
                          ],
                          "loc": {
                            "start": {
                              "line": 115,
                              "column": 39
                            },
                            "end": {
                              "line": 115,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          4763,
                          4781
                        ],
                        "loc": {
                          "start": {
                            "line": 115,
                            "column": 27
                          },
                          "end": {
                            "line": 115,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4784,
                          4785
                        ],
                        "loc": {
                          "start": {
                            "line": 115,
                            "column": 48
                          },
                          "end": {
                            "line": 115,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        4763,
                        4785
                      ],
                      "loc": {
                        "start": {
                          "line": 115,
                          "column": 27
                        },
                        "end": {
                          "line": 115,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      4751,
                      4786
                    ],
                    "loc": {
                      "start": {
                        "line": 115,
                        "column": 15
                      },
                      "end": {
                        "line": 115,
                        "column": 50
                      }
                    }
                  },
                  "range": [
                    4744,
                    4786
                  ],
                  "loc": {
                    "start": {
                      "line": 115,
                      "column": 8
                    },
                    "end": {
                      "line": 115,
                      "column": 50
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4740,
                4787
              ],
              "loc": {
                "start": {
                  "line": 115,
                  "column": 4
                },
                "end": {
                  "line": 115,
                  "column": 51
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    4796,
                    4807
                  ],
                  "loc": {
                    "start": {
                      "line": 116,
                      "column": 8
                    },
                    "end": {
                      "line": 116,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      4808,
                      4812
                    ],
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 20
                      },
                      "end": {
                        "line": 116,
                        "column": 24
                      }
                    }
                  }
                ],
                "range": [
                  4796,
                  4813
                ],
                "loc": {
                  "start": {
                    "line": 116,
                    "column": 8
                  },
                  "end": {
                    "line": 116,
                    "column": 25
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4825,
                          4834
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 8
                          },
                          "end": {
                            "line": 117,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4837,
                              4848
                            ],
                            "loc": {
                              "start": {
                                "line": 117,
                                "column": 20
                              },
                              "end": {
                                "line": 117,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              4849,
                              4852
                            ],
                            "loc": {
                              "start": {
                                "line": 117,
                                "column": 32
                              },
                              "end": {
                                "line": 117,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            4837,
                            4852
                          ],
                          "loc": {
                            "start": {
                              "line": 117,
                              "column": 20
                            },
                            "end": {
                              "line": 117,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          4837,
                          4854
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 20
                          },
                          "end": {
                            "line": 117,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        4825,
                        4854
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 8
                        },
                        "end": {
                          "line": 117,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      4825,
                      4855
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 8
                      },
                      "end": {
                        "line": 117,
                        "column": 38
                      }
                    }
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4868,
                              4879
                            ],
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 12
                              },
                              "end": {
                                "line": 118,
                                "column": 23
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length",
                            "range": [
                              4880,
                              4886
                            ],
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 24
                              },
                              "end": {
                                "line": 118,
                                "column": 30
                              }
                            }
                          },
                          "range": [
                            4868,
                            4886
                          ],
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 12
                            },
                            "end": {
                              "line": 118,
                              "column": 30
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "range": [
                            4889,
                            4890
                          ],
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 33
                            },
                            "end": {
                              "line": 118,
                              "column": 34
                            }
                          }
                        },
                        "range": [
                          4868,
                          4890
                        ],
                        "loc": {
                          "start": {
                            "line": 118,
                            "column": 12
                          },
                          "end": {
                            "line": 118,
                            "column": 34
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                4901,
                                4912
                              ],
                              "loc": {
                                "start": {
                                  "line": 118,
                                  "column": 45
                                },
                                "end": {
                                  "line": 118,
                                  "column": 56
                                }
                              }
                            },
                            "property": {
                              "type": "BinaryExpression",
                              "operator": "-",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    4913,
                                    4924
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 118,
                                      "column": 57
                                    },
                                    "end": {
                                      "line": 118,
                                      "column": 68
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length",
                                  "range": [
                                    4925,
                                    4931
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 118,
                                      "column": 69
                                    },
                                    "end": {
                                      "line": 118,
                                      "column": 75
                                    }
                                  }
                                },
                                "range": [
                                  4913,
                                  4931
                                ],
                                "loc": {
                                  "start": {
                                    "line": 118,
                                    "column": 57
                                  },
                                  "end": {
                                    "line": 118,
                                    "column": 75
                                  }
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1",
                                "range": [
                                  4934,
                                  4935
                                ],
                                "loc": {
                                  "start": {
                                    "line": 118,
                                    "column": 78
                                  },
                                  "end": {
                                    "line": 118,
                                    "column": 79
                                  }
                                }
                              },
                              "range": [
                                4913,
                                4935
                              ],
                              "loc": {
                                "start": {
                                  "line": 118,
                                  "column": 57
                                },
                                "end": {
                                  "line": 118,
                                  "column": 79
                                }
                              }
                            },
                            "range": [
                              4901,
                              4936
                            ],
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 45
                              },
                              "end": {
                                "line": 118,
                                "column": 80
                              }
                            }
                          },
                          "prefix": true,
                          "range": [
                            4894,
                            4936
                          ],
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 38
                            },
                            "end": {
                              "line": 118,
                              "column": 80
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'",
                          "range": [
                            4941,
                            4949
                          ],
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 85
                            },
                            "end": {
                              "line": 118,
                              "column": 93
                            }
                          }
                        },
                        "range": [
                          4894,
                          4949
                        ],
                        "loc": {
                          "start": {
                            "line": 118,
                            "column": 38
                          },
                          "end": {
                            "line": 118,
                            "column": 93
                          }
                        }
                      },
                      "range": [
                        4868,
                        4949
                      ],
                      "loc": {
                        "start": {
                          "line": 118,
                          "column": 12
                        },
                        "end": {
                          "line": 118,
                          "column": 93
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "concurrent",
                              "range": [
                                4965,
                                4975
                              ],
                              "loc": {
                                "start": {
                                  "line": 119,
                                  "column": 12
                                },
                                "end": {
                                  "line": 119,
                                  "column": 22
                                }
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    4978,
                                    4989
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 119,
                                      "column": 25
                                    },
                                    "end": {
                                      "line": 119,
                                      "column": 36
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "pop",
                                  "range": [
                                    4990,
                                    4993
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 119,
                                      "column": 37
                                    },
                                    "end": {
                                      "line": 119,
                                      "column": 40
                                    }
                                  }
                                },
                                "range": [
                                  4978,
                                  4993
                                ],
                                "loc": {
                                  "start": {
                                    "line": 119,
                                    "column": 25
                                  },
                                  "end": {
                                    "line": 119,
                                    "column": 40
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                4978,
                                4995
                              ],
                              "loc": {
                                "start": {
                                  "line": 119,
                                  "column": 25
                                },
                                "end": {
                                  "line": 119,
                                  "column": 42
                                }
                              }
                            },
                            "range": [
                              4965,
                              4995
                            ],
                            "loc": {
                              "start": {
                                "line": 119,
                                "column": 12
                              },
                              "end": {
                                "line": 119,
                                "column": 42
                              }
                            }
                          },
                          "range": [
                            4965,
                            4996
                          ],
                          "loc": {
                            "start": {
                              "line": 119,
                              "column": 12
                            },
                            "end": {
                              "line": 119,
                              "column": 43
                            }
                          }
                        }
                      ],
                      "range": [
                        4951,
                        5006
                      ],
                      "loc": {
                        "start": {
                          "line": 118,
                          "column": 95
                        },
                        "end": {
                          "line": 120,
                          "column": 9
                        }
                      }
                    },
                    "alternate": null,
                    "range": [
                      4864,
                      5006
                    ],
                    "loc": {
                      "start": {
                        "line": 118,
                        "column": 8
                      },
                      "end": {
                        "line": 120,
                        "column": 9
                      }
                    }
                  }
                ],
                "range": [
                  4815,
                  5012
                ],
                "loc": {
                  "start": {
                    "line": 116,
                    "column": 27
                  },
                  "end": {
                    "line": 121,
                    "column": 5
                  }
                }
              },
              "alternate": {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "last",
                      "range": [
                        5033,
                        5037
                      ],
                      "loc": {
                        "start": {
                          "line": 122,
                          "column": 20
                        },
                        "end": {
                          "line": 122,
                          "column": 24
                        }
                      }
                    },
                    "prefix": true,
                    "range": [
                      5026,
                      5037
                    ],
                    "loc": {
                      "start": {
                        "line": 122,
                        "column": 13
                      },
                      "end": {
                        "line": 122,
                        "column": 24
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": "number",
                    "raw": "'number'",
                    "range": [
                      5042,
                      5050
                    ],
                    "loc": {
                      "start": {
                        "line": 122,
                        "column": 29
                      },
                      "end": {
                        "line": 122,
                        "column": 37
                      }
                    }
                  },
                  "range": [
                    5026,
                    5050
                  ],
                  "loc": {
                    "start": {
                      "line": 122,
                      "column": 13
                    },
                    "end": {
                      "line": 122,
                      "column": 37
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "concurrent",
                          "range": [
                            5062,
                            5072
                          ],
                          "loc": {
                            "start": {
                              "line": 123,
                              "column": 8
                            },
                            "end": {
                              "line": 123,
                              "column": 18
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                5075,
                                5086
                              ],
                              "loc": {
                                "start": {
                                  "line": 123,
                                  "column": 21
                                },
                                "end": {
                                  "line": 123,
                                  "column": 32
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "pop",
                              "range": [
                                5087,
                                5090
                              ],
                              "loc": {
                                "start": {
                                  "line": 123,
                                  "column": 33
                                },
                                "end": {
                                  "line": 123,
                                  "column": 36
                                }
                              }
                            },
                            "range": [
                              5075,
                              5090
                            ],
                            "loc": {
                              "start": {
                                "line": 123,
                                "column": 21
                              },
                              "end": {
                                "line": 123,
                                "column": 36
                              }
                            }
                          },
                          "arguments": [],
                          "range": [
                            5075,
                            5092
                          ],
                          "loc": {
                            "start": {
                              "line": 123,
                              "column": 21
                            },
                            "end": {
                              "line": 123,
                              "column": 38
                            }
                          }
                        },
                        "range": [
                          5062,
                          5092
                        ],
                        "loc": {
                          "start": {
                            "line": 123,
                            "column": 8
                          },
                          "end": {
                            "line": 123,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        5062,
                        5093
                      ],
                      "loc": {
                        "start": {
                          "line": 123,
                          "column": 8
                        },
                        "end": {
                          "line": 123,
                          "column": 39
                        }
                      }
                    }
                  ],
                  "range": [
                    5052,
                    5099
                  ],
                  "loc": {
                    "start": {
                      "line": 122,
                      "column": 39
                    },
                    "end": {
                      "line": 124,
                      "column": 5
                    }
                  }
                },
                "alternate": null,
                "range": [
                  5022,
                  5099
                ],
                "loc": {
                  "start": {
                    "line": 122,
                    "column": 9
                  },
                  "end": {
                    "line": 124,
                    "column": 5
                  }
                }
              },
              "range": [
                4792,
                5099
              ],
              "loc": {
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 124,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "scheduler",
                      "range": [
                        5108,
                        5117
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 8
                        },
                        "end": {
                          "line": 125,
                          "column": 17
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null",
                      "range": [
                        5122,
                        5126
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 22
                        },
                        "end": {
                          "line": 125,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      5108,
                      5126
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 8
                      },
                      "end": {
                        "line": 125,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          5130,
                          5141
                        ],
                        "loc": {
                          "start": {
                            "line": 125,
                            "column": 30
                          },
                          "end": {
                            "line": 125,
                            "column": 41
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "range": [
                          5142,
                          5148
                        ],
                        "loc": {
                          "start": {
                            "line": 125,
                            "column": 42
                          },
                          "end": {
                            "line": 125,
                            "column": 48
                          }
                        }
                      },
                      "range": [
                        5130,
                        5148
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 30
                        },
                        "end": {
                          "line": 125,
                          "column": 48
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1",
                      "range": [
                        5153,
                        5154
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 53
                        },
                        "end": {
                          "line": 125,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      5130,
                      5154
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 30
                      },
                      "end": {
                        "line": 125,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    5108,
                    5154
                  ],
                  "loc": {
                    "start": {
                      "line": 125,
                      "column": 8
                    },
                    "end": {
                      "line": 125,
                      "column": 54
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "instanceof",
                  "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        5158,
                        5169
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 58
                        },
                        "end": {
                          "line": 125,
                          "column": 69
                        }
                      }
                    },
                    "property": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0",
                      "range": [
                        5170,
                        5171
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 70
                        },
                        "end": {
                          "line": 125,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      5158,
                      5172
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 58
                      },
                      "end": {
                        "line": 125,
                        "column": 72
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Observable",
                    "range": [
                      5184,
                      5194
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 84
                      },
                      "end": {
                        "line": 125,
                        "column": 94
                      }
                    }
                  },
                  "range": [
                    5158,
                    5194
                  ],
                  "loc": {
                    "start": {
                      "line": 125,
                      "column": 58
                    },
                    "end": {
                      "line": 125,
                      "column": 94
                    }
                  }
                },
                "range": [
                  5108,
                  5194
                ],
                "loc": {
                  "start": {
                    "line": 125,
                    "column": 8
                  },
                  "end": {
                    "line": 125,
                    "column": 94
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          5213,
                          5224
                        ],
                        "loc": {
                          "start": {
                            "line": 126,
                            "column": 15
                          },
                          "end": {
                            "line": 126,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          5225,
                          5226
                        ],
                        "loc": {
                          "start": {
                            "line": 126,
                            "column": 27
                          },
                          "end": {
                            "line": 126,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        5213,
                        5227
                      ],
                      "loc": {
                        "start": {
                          "line": 126,
                          "column": 15
                        },
                        "end": {
                          "line": 126,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      5206,
                      5228
                    ],
                    "loc": {
                      "start": {
                        "line": 126,
                        "column": 8
                      },
                      "end": {
                        "line": 126,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  5196,
                  5234
                ],
                "loc": {
                  "start": {
                    "line": 125,
                    "column": 96
                  },
                  "end": {
                    "line": 127,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                5104,
                5234
              ],
              "loc": {
                "start": {
                  "line": 125,
                  "column": 4
                },
                "end": {
                  "line": 127,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        5250,
                        5265
                      ],
                      "loc": {
                        "start": {
                          "line": 128,
                          "column": 15
                        },
                        "end": {
                          "line": 128,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          5266,
                          5277
                        ],
                        "loc": {
                          "start": {
                            "line": 128,
                            "column": 31
                          },
                          "end": {
                            "line": 128,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          5279,
                          5288
                        ],
                        "loc": {
                          "start": {
                            "line": 128,
                            "column": 44
                          },
                          "end": {
                            "line": 128,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      5246,
                      5289
                    ],
                    "loc": {
                      "start": {
                        "line": 128,
                        "column": 11
                      },
                      "end": {
                        "line": 128,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      5290,
                      5294
                    ],
                    "loc": {
                      "start": {
                        "line": 128,
                        "column": 55
                      },
                      "end": {
                        "line": 128,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    5246,
                    5294
                  ],
                  "loc": {
                    "start": {
                      "line": 128,
                      "column": 11
                    },
                    "end": {
                      "line": 128,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        5299,
                        5315
                      ],
                      "loc": {
                        "start": {
                          "line": 128,
                          "column": 64
                        },
                        "end": {
                          "line": 128,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "concurrent",
                        "range": [
                          5316,
                          5326
                        ],
                        "loc": {
                          "start": {
                            "line": 128,
                            "column": 81
                          },
                          "end": {
                            "line": 128,
                            "column": 91
                          }
                        }
                      }
                    ],
                    "range": [
                      5295,
                      5327
                    ],
                    "loc": {
                      "start": {
                        "line": 128,
                        "column": 60
                      },
                      "end": {
                        "line": 128,
                        "column": 92
                      }
                    }
                  }
                ],
                "range": [
                  5246,
                  5328
                ],
                "loc": {
                  "start": {
                    "line": 128,
                    "column": 11
                  },
                  "end": {
                    "line": 128,
                    "column": 93
                  }
                }
              },
              "range": [
                5239,
                5329
              ],
              "loc": {
                "start": {
                  "line": 128,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 94
                }
              }
            }
          ],
          "range": [
            4661,
            5331
          ],
          "loc": {
            "start": {
              "line": 112,
              "column": 44
            },
            "end": {
              "line": 129,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4624,
          5331
        ],
        "loc": {
          "start": {
            "line": 112,
            "column": 7
          },
          "end": {
            "line": 129,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              1851,
              1886
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              1887,
              4616
            ],
            "loc": {
              "start": {
                "line": 52,
                "column": 0
              },
              "end": {
                "line": 111,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=merge.js.map",
            "range": [
              5332,
              5365
            ],
            "loc": {
              "start": {
                "line": 130,
                "column": 0
              },
              "end": {
                "line": 130,
                "column": 33
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4617,
        5331
      ],
      "loc": {
        "start": {
          "line": 112,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            1851,
            1886
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            1887,
            4616
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 0
            },
            "end": {
              "line": 111,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=merge.js.map",
          "range": [
            5332,
            5365
          ],
          "loc": {
            "start": {
              "line": 130,
              "column": 0
            },
            "end": {
              "line": 130,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    5331
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 129,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        207,
        242
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * 创建一个输出 Observable ，它可以同时发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过把多个 Observables 的值混合到一个 Observable 中\n * 来将其打平。</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` 订阅每个给定的输入 Observable (给定的源或作为参数的 Observable )，然后只是\n * 将所有输入 Observables 的所有值发送(不进行任何转换)到输出 Observable 。所有的输入\n * Observable 都完成了，输出 Observable 才能完成。任何由输入 Observable 发出的错误都\n * 会立即在输出 Observalbe 上发出。\n *\n * @example <caption>合并两个 Observables: 时间间隔为1秒的 timer 和 clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>合并三个 Observables ，但只能同时运行两个</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // 参数\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other 可以与源 Observable 合并的输入 Observable 。\n * 可以给定多个输入 Observables 作为参数。\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] 可以同时订阅的输入\n * Observables 的最大数量。\n * @param {Scheduler} [scheduler=null] 用来管理输入 Observables 的并发性的\n * 调度器。\n * @return {Observable} 该 Observable 发出的项是每个输入 Observable 的结果。\n * @method merge\n * @owner Observable\n ",
      "range": [
        243,
        1746
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        1851,
        1886
      ],
      "loc": {
        "start": {
          "line": 51,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
      "range": [
        1887,
        4616
      ],
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 111,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=merge.js.map",
      "range": [
        5332,
        5365
      ],
      "loc": {
        "start": {
          "line": 130,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 33
        }
      }
    }
  ]
}